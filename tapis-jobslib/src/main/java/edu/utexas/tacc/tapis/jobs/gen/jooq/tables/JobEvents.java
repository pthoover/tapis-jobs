/*
 * This file is generated by jOOQ.
 */
package edu.utexas.tacc.tapis.jobs.gen.jooq.tables;


import edu.utexas.tacc.tapis.jobs.gen.jooq.Indexes;
import edu.utexas.tacc.tapis.jobs.gen.jooq.Keys;
import edu.utexas.tacc.tapis.jobs.gen.jooq.Public;
import edu.utexas.tacc.tapis.jobs.gen.jooq.enums.JobEventEnum;
import edu.utexas.tacc.tapis.jobs.gen.jooq.tables.records.JobEventsRecord;
import edu.utexas.tacc.tapis.jobs.model.enumerations.JobEventType;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JobEvents extends TableImpl<JobEventsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.job_events</code>
     */
    public static final JobEvents JOB_EVENTS = new JobEvents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobEventsRecord> getRecordType() {
        return JobEventsRecord.class;
    }

    /**
     * The column <code>public.job_events.id</code>.
     */
    public final TableField<JobEventsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.job_events.event</code>.
     */
    public final TableField<JobEventsRecord, JobEventType> EVENT = createField(DSL.name("event"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(edu.utexas.tacc.tapis.jobs.gen.jooq.enums.JobEventEnum.class), this, "", new EnumConverter<JobEventEnum, JobEventType>(JobEventEnum.class, JobEventType.class));

    /**
     * The column <code>public.job_events.created</code>.
     */
    public final TableField<JobEventsRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("timezone('utc'::text, now())", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.job_events.job_uuid</code>.
     */
    public final TableField<JobEventsRecord, String> JOB_UUID = createField(DSL.name("job_uuid"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.job_events.event_detail</code>.
     */
    public final TableField<JobEventsRecord, String> EVENT_DETAIL = createField(DSL.name("event_detail"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.job_events.oth_uuid</code>.
     */
    public final TableField<JobEventsRecord, String> OTH_UUID = createField(DSL.name("oth_uuid"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>public.job_events.description</code>.
     */
    public final TableField<JobEventsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(16384).nullable(false), this, "");

    /**
     * The column <code>public.job_events.tenant</code>.
     */
    public final TableField<JobEventsRecord, String> TENANT = createField(DSL.name("tenant"), SQLDataType.VARCHAR(24).nullable(false).defaultValue(DSL.field("'unknown'::character varying", SQLDataType.VARCHAR)), this, "");

    private JobEvents(Name alias, Table<JobEventsRecord> aliased) {
        this(alias, aliased, null);
    }

    private JobEvents(Name alias, Table<JobEventsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.job_events</code> table reference
     */
    public JobEvents(String alias) {
        this(DSL.name(alias), JOB_EVENTS);
    }

    /**
     * Create an aliased <code>public.job_events</code> table reference
     */
    public JobEvents(Name alias) {
        this(alias, JOB_EVENTS);
    }

    /**
     * Create a <code>public.job_events</code> table reference
     */
    public JobEvents() {
        this(DSL.name("job_events"), null);
    }

    public <O extends Record> JobEvents(Table<O> child, ForeignKey<O, JobEventsRecord> key) {
        super(child, key, JOB_EVENTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.JOB_EVENTS_CREATED_IDX, Indexes.JOB_EVENTS_EVENT_DETAIL_IDX, Indexes.JOB_EVENTS_EVENT_IDX, Indexes.JOB_EVENTS_JOB_UUID_IDX);
    }

    @Override
    public Identity<JobEventsRecord, Long> getIdentity() {
        return (Identity<JobEventsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JobEventsRecord> getPrimaryKey() {
        return Keys.JOB_EVENTS_PKEY;
    }

    @Override
    public JobEvents as(String alias) {
        return new JobEvents(DSL.name(alias), this);
    }

    @Override
    public JobEvents as(Name alias) {
        return new JobEvents(alias, this);
    }

    @Override
    public JobEvents as(Table<?> alias) {
        return new JobEvents(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JobEvents rename(String name) {
        return new JobEvents(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobEvents rename(Name name) {
        return new JobEvents(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobEvents rename(Table<?> name) {
        return new JobEvents(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, JobEventType, LocalDateTime, String, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Long, ? super JobEventType, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Long, ? super JobEventType, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
