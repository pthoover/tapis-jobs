/*
 * This file is generated by jOOQ.
 */
package edu.utexas.tacc.tapis.jobs.gen.jooq.tables;


import edu.utexas.tacc.tapis.jobs.gen.jooq.Indexes;
import edu.utexas.tacc.tapis.jobs.gen.jooq.Keys;
import edu.utexas.tacc.tapis.jobs.gen.jooq.Public;
import edu.utexas.tacc.tapis.jobs.gen.jooq.enums.JobStatusEnum;
import edu.utexas.tacc.tapis.jobs.gen.jooq.tables.records.JobBlockedRecord;
import edu.utexas.tacc.tapis.jobs.model.enumerations.JobStatusType;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JobBlocked extends TableImpl<JobBlockedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.job_blocked</code>
     */
    public static final JobBlocked JOB_BLOCKED = new JobBlocked();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobBlockedRecord> getRecordType() {
        return JobBlockedRecord.class;
    }

    /**
     * The column <code>public.job_blocked.id</code>.
     */
    public final TableField<JobBlockedRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.job_blocked.recovery_id</code>.
     */
    public final TableField<JobBlockedRecord, Integer> RECOVERY_ID = createField(DSL.name("recovery_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.job_blocked.created</code>.
     */
    public final TableField<JobBlockedRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("timezone('utc'::text, now())", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.job_blocked.success_status</code>.
     */
    public final TableField<JobBlockedRecord, JobStatusType> SUCCESS_STATUS = createField(DSL.name("success_status"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(edu.utexas.tacc.tapis.jobs.gen.jooq.enums.JobStatusEnum.class), this, "", new EnumConverter<JobStatusEnum, JobStatusType>(JobStatusEnum.class, JobStatusType.class));

    /**
     * The column <code>public.job_blocked.job_uuid</code>.
     */
    public final TableField<JobBlockedRecord, String> JOB_UUID = createField(DSL.name("job_uuid"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.job_blocked.status_message</code>.
     */
    public final TableField<JobBlockedRecord, String> STATUS_MESSAGE = createField(DSL.name("status_message"), SQLDataType.VARCHAR(2048).nullable(false), this, "");

    private JobBlocked(Name alias, Table<JobBlockedRecord> aliased) {
        this(alias, aliased, null);
    }

    private JobBlocked(Name alias, Table<JobBlockedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.job_blocked</code> table reference
     */
    public JobBlocked(String alias) {
        this(DSL.name(alias), JOB_BLOCKED);
    }

    /**
     * Create an aliased <code>public.job_blocked</code> table reference
     */
    public JobBlocked(Name alias) {
        this(alias, JOB_BLOCKED);
    }

    /**
     * Create a <code>public.job_blocked</code> table reference
     */
    public JobBlocked() {
        this(DSL.name("job_blocked"), null);
    }

    public <O extends Record> JobBlocked(Table<O> child, ForeignKey<O, JobBlockedRecord> key) {
        super(child, key, JOB_BLOCKED);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.JOB_BLOCKED_JOB_UUID_IDX, Indexes.JOB_BLOCKED_RECOVERY_ID_IDX);
    }

    @Override
    public Identity<JobBlockedRecord, Integer> getIdentity() {
        return (Identity<JobBlockedRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JobBlockedRecord> getPrimaryKey() {
        return Keys.JOB_BLOCKED_PKEY;
    }

    @Override
    public List<ForeignKey<JobBlockedRecord, ?>> getReferences() {
        return Arrays.asList(Keys.JOB_BLOCKED__JOB_BLOCKED_RECOVERY_ID_FKEY);
    }

    private transient JobRecovery _jobRecovery;

    /**
     * Get the implicit join path to the <code>public.job_recovery</code> table.
     */
    public JobRecovery jobRecovery() {
        if (_jobRecovery == null)
            _jobRecovery = new JobRecovery(this, Keys.JOB_BLOCKED__JOB_BLOCKED_RECOVERY_ID_FKEY);

        return _jobRecovery;
    }

    @Override
    public JobBlocked as(String alias) {
        return new JobBlocked(DSL.name(alias), this);
    }

    @Override
    public JobBlocked as(Name alias) {
        return new JobBlocked(alias, this);
    }

    @Override
    public JobBlocked as(Table<?> alias) {
        return new JobBlocked(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JobBlocked rename(String name) {
        return new JobBlocked(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobBlocked rename(Name name) {
        return new JobBlocked(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobBlocked rename(Table<?> name) {
        return new JobBlocked(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, LocalDateTime, JobStatusType, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super Integer, ? super LocalDateTime, ? super JobStatusType, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super Integer, ? super LocalDateTime, ? super JobStatusType, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
